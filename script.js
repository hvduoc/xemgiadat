
    // --- C·∫§U H√åNH FIREBASE ---
const firebaseConfig = {
    apiKey: "AIzaSyDu9tYpJdMPT7Hvk2_Ug8XHwxRQXoakRfs",
    authDomain: "xemgiadat-dfe15.firebaseapp.com",
    projectId: "xemgiadat-dfe15",
    storageBucket: "xemgiadat-dfe15.appspot.com",
    messagingSenderId: "361952598367",
    appId: "1:361952598367:web:c1e2e3b1a6d5d8c797beea",
    measurementId: "G-XT932D9N1N"
};

// --- KH·ªûI T·∫†O C√ÅC D·ªäCH V·ª§ ---
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const db = firebase.firestore();

// --- KH·ªûI T·∫†O B·∫¢N ƒê·ªí V√Ä C√ÅC L·ªöP ---
const map = L.map('map', { center: [16.054456, 108.202167], zoom: 13, zoomControl: false });
const myAttribution = '¬© XemGiaDat | D·ªØ li·ªáu ¬© S·ªü TNMT ƒê√† N·∫µng';

const googleStreets = L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',{
    maxZoom: 20,
    subdomains:['mt0','mt1','mt2','mt3'],
    attribution: myAttribution + ' | ¬© Google Maps'
});

const googleSat = L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',{
    maxZoom: 20,
    subdomains:['mt0','mt1','mt2','mt3'],
    attribution: myAttribution + ' | ¬© Google Satellite'
});

const osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: myAttribution + ' | ¬© OpenStreetMap'
});

// L·ªõp b·∫£n ƒë·ªì ph√¢n l√¥ (D√πng cho c·∫£ hi·ªÉn th·ªã v√† tra c·ª©u)
const parcelLayer = L.esri.dynamicMapLayer({
    url: 'https://gisportal.danang.gov.vn/server/rest/services/DiaChinh/DaNangLand_DiaChinh/MapServer',
    opacity: 0.7,
    useCors: false
});

const baseMaps = {
    "·∫¢nh v·ªá tinh": googleSat,
    "B·∫£n ƒë·ªì ƒë∆∞·ªùng": googleStreets,
    "OpenStreetMap": osmLayer
};

const overlayMaps = {
    "üó∫Ô∏è B·∫£n ƒë·ªì ph√¢n l√¥": parcelLayer
};

// Th√™m c√°c l·ªõp v√† ƒëi·ªÅu khi·ªÉn v√†o b·∫£n ƒë·ªì
// L.control.zoom({ position: 'topright' }).addTo(map); T·∫°m th·ªùi v√¥ hi·ªáu h√≥a n√∫t Zoom th·ªß c√¥ng
googleStreets.addTo(map); // M·∫∑c ƒë·ªãnh l√† b·∫£n ƒë·ªì v·ªá tinh
parcelLayer.addTo(map); // B·∫≠t s·∫µn l·ªõp ph√¢n l√¥
L.control.layers(baseMaps, overlayMaps, { position: 'topright' }).addTo(map);


// --- TO√ÄN B·ªò LOGIC C·ª¶A ·ª®NG D·ª§NG S·∫º N·∫∞M TRONG DOMCONTENTLOADED ---
document.addEventListener('DOMContentLoaded', () => {

    // --- L·∫•y c√°c ƒë·ªëi t∆∞·ª£ng DOM ---
    const mapContainer = document.getElementById('map');
    const modal = document.getElementById('form-modal');
    const listModal = document.getElementById('price-list-modal');
    const addLocationBtn = document.getElementById('add-location-btn');
    const listBtn = document.getElementById('list-btn');
    const queryBtn = document.getElementById('query-btn');
    const closeModalBtn = document.getElementById('close-modal-btn');
    const closeListBtn = document.getElementById('close-list-btn');
    const form = document.getElementById('location-form');
    const instructionBanner = document.getElementById('instruction-banner');
    // Th√™m d√≤ng n√†y v√†o trong s·ª± ki·ªán DOMContentLoaded
    // ‚úÖ Code m·ªõi ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p
    const searchControl = L.esri.Geocoding.geosearch({
        useMapBounds: true // G·ª£i √Ω t√¨m ki·∫øm trong khung h√¨nh b·∫£n ƒë·ªì hi·ªán t·∫°i
    }).addTo(map);

    // Auth UI
    const authContainer = document.getElementById('auth-container');
    const loginBtn = document.getElementById('login-btn');
    const logoutBtn = document.getElementById('logout-btn');
    const userProfileDiv = document.getElementById('user-profile');
    const firebaseuiContainer = document.getElementById('firebaseui-auth-container');
    const ui = new firebaseui.auth.AuthUI(auth);

    // Opacity Slider
    const opacityControl = document.getElementById('opacity-control');
    const opacitySlider = document.getElementById('opacity-slider');

    // D√°n ƒëo·∫°n m√£ n√†y v√†o b√™n trong s·ª± ki·ªán DOMContentLoaded

    // D√°n v√†o b√™n trong s·ª± ki·ªán DOMContentLoaded

    // --- B·ªò ƒêI·ªÄU KHI·ªÇN CH√çNH (B·∫ÆT BU·ªòC PH·∫¢I C√ì) ---
    const donateBtn = document.getElementById('donate-btn');
    const donateModal = document.getElementById('donate-modal');
    const closeDonateModalBtn = document.getElementById('close-donate-modal');
   // --- B·∫ÆT ƒê·∫¶U CODE M·ªöI: X·ª¨ L√ù LINK CHIA S·∫∫ SAU KHI D·ªÆ LI·ªÜU ƒê√É T·∫¢I ---
    
    // --- K·∫æT TH√öC CODE M·ªöI ---
    donateBtn.addEventListener('click', () => {
        donateModal.classList.remove('hidden');
    });

    closeDonateModalBtn.addEventListener('click', () => {
        donateModal.classList.add('hidden');
    });

    donateModal.addEventListener('click', (e) => {
        if (e.target === donateModal) {
            donateModal.classList.add('hidden');
        }
    });


    // --- T√çNH NƒÇNG PH·ª§: N√öT SAO CH√âP ---
    const copyBtn = document.getElementById('copy-stk-btn');
    const accountNumber = document.getElementById('bank-account-number').textContent;

    copyBtn.addEventListener('click', () => {
        navigator.clipboard.writeText(accountNumber).then(() => {
            const originalIcon = copyBtn.innerHTML;
            copyBtn.innerHTML = '<svg class="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>';
            setTimeout(() => {
                copyBtn.innerHTML = originalIcon;
            }, 1500);
        }).catch(err => {
            console.error('Kh√¥ng th·ªÉ sao ch√©p: ', err);
        });
    });


    // --- BI·∫æN TR·∫†NG TH√ÅI V√Ä BI·∫æN TO√ÄN C·ª§C ---
    let currentUser = null;
    let tempMarker = null;
    let selectedCoords = null;
    let isAddMode = false;
    let isQueryMode = false;
    let priceMarkers = L.markerClusterGroup({
        iconCreateFunction: function (cluster) {
            const count = cluster.getChildCount();
            let size = ' marker-cluster-';
            if (count < 10) {
                size += 'small';
            } else if (count < 100) {
                size += 'medium';
            } else {
                size += 'large';
            }
            // Th√™m class 'marker-cluster-yellow' ƒë·ªÉ √°p d·ª•ng m√†u m·ªõi
            return new L.DivIcon({
                html: '<div><span>' + count + '</span></div>',
                className: 'marker-cluster marker-cluster-yellow' + size,
                iconSize: new L.Point(40, 40)
            });
        }
    }).addTo(map);

    // --- CH·ª®C NƒÇNG PH·ª§: B·ªò L·ªåC ƒê·ªò M·ªú ---
    opacitySlider.addEventListener('input', (e) => parcelLayer.setOpacity(e.target.value));
    map.on('overlayadd', e => { if (e.layer === parcelLayer) opacityControl.classList.remove('hidden'); });
    map.on('overlayremove', e => { if (e.layer === parcelLayer) opacityControl.classList.add('hidden'); });
    if (map.hasLayer(parcelLayer)) opacityControl.classList.remove('hidden');

    // --- CH·ª®C NƒÇNG PH·ª§: LIKE (G·∫Øn v√†o window ƒë·ªÉ HTML c√≥ th·ªÉ g·ªçi) ---    
    window.likePlace = function(docId) {
        const likedKey = `liked-${docId}`;

        // 1. Ki·ªÉm tra trong localStorage xem ng∆∞·ªùi n√†y ƒë√£ tim b√†i n√†y ch∆∞a
        if (localStorage.getItem(likedKey) === 'true') {
            showToast('B·∫°n ƒë√£ th√≠ch ƒë·ªãa ƒëi·ªÉm n√†y r·ªìi!');
            return;
        }

        // 2. N·∫øu ch∆∞a, ti·∫øn h√†nh c·∫≠p nh·∫≠t tr√™n Firestore
        const docRef = db.collection('listings').doc(docId);

        docRef.update({
            likeCount: firebase.firestore.FieldValue.increment(1)
        })
        .then(() => {
            showToast('C·∫£m ∆°n b·∫°n ƒë√£ y√™u th√≠ch!');
            // 3. ƒê√°nh d·∫•u l√† ƒë√£ tim trong localStorage ƒë·ªÉ kh√¥ng cho tim l·∫°i
            localStorage.setItem(likedKey, 'true');
        })
        .catch(error => {
            console.error("L·ªói khi c·∫≠p nh·∫≠t tim: ", error);
            showToast('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.');
        });
    }
    
    // --- QU·∫¢N L√ù C√ÅC CH·∫æ ƒê·ªò C·ª¶A B·∫¢N ƒê·ªí ---
    function enterAddMode() {
        exitAllModes(); // Lu√¥n tho√°t c√°c ch·∫ø ƒë·ªô kh√°c tr∆∞·ªõc khi v√†o ch·∫ø ƒë·ªô m·ªõi
        isAddMode = true;
        mapContainer.classList.add('map-add-mode');
        addLocationBtn.classList.add('bg-green-500');
        addLocationBtn.classList.remove('bg-blue-600');
        instructionBanner.textContent = 'Nh·∫•p v√†o b·∫£n ƒë·ªì ƒë·ªÉ ch·ªçn v·ªã tr√≠ c·∫ßn th√™m.';
        instructionBanner.classList.remove('hidden');
    }

    function enterQueryMode() {
        exitAllModes();
        isQueryMode = true;
        mapContainer.classList.add('map-query-mode');
        queryBtn.classList.add('bg-green-500');
        queryBtn.classList.remove('bg-purple-600');
        instructionBanner.textContent = 'Nh·∫•p v√†o v·ªã tr√≠ tr√™n b·∫£n ƒë·ªì ƒë·ªÉ tra c·ª©u th√¥ng tin th·ª≠a ƒë·∫•t.';
        instructionBanner.classList.remove('hidden');
    }

    function exitAllModes() {
        isAddMode = false;
        isQueryMode = false;
        
        mapContainer.classList.remove('map-add-mode', 'map-query-mode');
        addLocationBtn.classList.remove('bg-green-500');
        addLocationBtn.classList.add('bg-blue-600');
        queryBtn.classList.remove('bg-green-500');
        queryBtn.classList.add('bg-purple-600');
        
        instructionBanner.classList.add('hidden');
        if (tempMarker) {
            map.removeLayer(tempMarker);
            tempMarker = null;
        }
    }

    // --- S·ª∞ KI·ªÜN CLICK C√ÅC N√öT CH·ª®C NƒÇNG ---
    addLocationBtn.addEventListener('click', () => {
        if (!currentUser) {
            instructionBanner.textContent = 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m ƒë·ªãa ƒëi·ªÉm!';
            instructionBanner.classList.remove('hidden');
            setTimeout(() => instructionBanner.classList.add('hidden'), 3000);
            return;
        }
        isAddMode ? exitAllModes() : enterAddMode();
    });

    queryBtn.addEventListener('click', () => {       
        isQueryMode ? exitAllModes() : enterQueryMode();
    });

    listBtn.addEventListener('click', () => listModal.classList.remove('hidden'));
    closeListBtn.addEventListener('click', () => listModal.classList.add('hidden'));
    closeModalBtn.addEventListener('click', () => {
        modal.classList.add('hidden');
        exitAllModes();
    });

    // --- S·ª∞ KI·ªÜN CLICK CH√çNH TR√äN B·∫¢N ƒê·ªí ---
    // Thay th·∫ø to√†n b·ªô h√†m map.on('click',...) c·ªßa b·∫°n b·∫±ng ƒëo·∫°n n√†y

    map.on('click', function(e) {
        // 1. N·∫øu ·ªü ch·∫ø ƒë·ªô TH√äM ƒê·ªäA ƒêI·ªÇM
        if (isAddMode) {
            selectedCoords = e.latlng;
            tempMarker = L.marker(selectedCoords).addTo(map);
            modal.classList.remove('hidden');

            // B·∫Øt ƒë·∫ßu code reverse geocoding
            const geocodeService = L.esri.Geocoding.geocodeService();
            geocodeService.reverse().latlng(selectedCoords).run(function (error, result) {
                if (error) {
                    console.error("L·ªói khi t√¨m ƒë·ªãa ch·ªâ:", error);
                    document.getElementById('address-input').value = 'Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ';
                    return;
                }
                if (result && result.address) {
                    const address = result.address.Match_addr;
                    document.getElementById('address-input').value = address;
                } else {
                    document.getElementById('address-input').value = 'Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ';
                }
            });
            // K·∫øt th√∫c code reverse geocoding

        } 
        // 2. N·∫øu ·ªü ch·∫ø ƒë·ªô TRA C·ª®U
        else if (isQueryMode) {
            L.popup().setLatLng(e.latlng).setContent('<p>ƒêang t√¨m ki·∫øm...</p>').openOn(map);
            parcelLayer.identify().on(map).at(e.latlng).run((error, featureCollection) => {
                exitAllModes();
                if (error) {
                    console.error(error);
                    return L.popup().setLatLng(e.latlng).setContent('C√≥ l·ªói x·∫£y ra khi tra c·ª©u.').openOn(map);
                }
                if (featureCollection.features.length > 0) {
                    const props = featureCollection.features[0].properties;
                    const lat = e.latlng.lat.toFixed(6);
                    const lng = e.latlng.lng.toFixed(6);
                    const popupContent = `
                        <div class="thong-tin-dia-chinh">
                                <h3 class="font-bold text-base mb-2 text-center">Th√¥ng tin ƒë·ªãa ch√≠nh</h3>
                                <table>
                                    <tr><td><strong>S·ªë t·ªù:</strong></td><td>${props['S·ªë hi·ªáu t·ªù b·∫£n ƒë·ªì'] ?? 'N/A'}</td></tr>
                                    <tr><td><strong>S·ªë th·ª≠a:</strong></td><td>${props['S·ªë th·ª≠a'] ?? 'N/A'}</td></tr>
                                    <tr><td><strong>Lo·∫°i ƒë·∫•t:</strong></td><td>${props['K√Ω hi·ªáu m·ª•c ƒë√≠ch s·ª≠ d·ª•ng'] ?? 'N/A'}</td></tr>
                                    <tr><td><strong>Di·ªán t√≠ch:</strong></td><td>${props['Di·ªán t√≠ch'] ? parseFloat(props['Di·ªán t√≠ch']).toFixed(1) : 'N/A'}</td></tr>
                                    <tr><td><strong>ƒê·ªãa ch·ªâ:</strong></td><td>${props['ƒê·ªãa ch·ªâ'] && props['ƒê·ªãa ch·ªâ'] !== 'Null' ? props['ƒê·ªãa ch·ªâ'] : 'N/A'}</td></tr>
                                </table>
                                <hr class="my-2">
                                <div class="actions">
                                    <button onclick="toggleLike(this)" title="Y√™u th√≠ch"><i class="far fa-heart"></i></button>
                                    <button onclick="shareOnFacebook(${lat}, ${lng})" title="Chia s·∫ª Facebook"><i class="fas fa-share-alt"></i></button>
                                    <button onclick="copyLocationLink(${lat}, ${lng})" title="Sao ch√©p li√™n k·∫øt"><i class="fas fa-link"></i></button>
                                </div>
                            </div>
                    `;
                    L.popup({ minWidth: 180, maxWidth: 250  }).setLatLng(e.latlng).setContent(popupContent).openOn(map);
                } else {
                    L.popup().setLatLng(e.latlng).setContent('Kh√¥ng t√¨m th·∫•y th√¥ng tin t·∫°i v·ªã tr√≠ n√†y.').openOn(map);
                }
            });
        }
    }); // D·∫•u ngo·∫∑c ƒë√≥ng ƒë√∫ng c·ªßa h√†m map.on('click')

    // --- LOGIC X√ÅC TH·ª∞C FIREBASE ---  

    // ‚úÖ H√ÄM AUTHENTICATION ƒê√É S·ª¨A L·ªñI
    // Thay th·∫ø to√†n b·ªô h√†m auth.onAuthStateChanged c≈© b·∫±ng h√†m n√†y

    // ‚úÖ H√ÄM AUTHENTICATION ƒê√É S·ª¨A L·ªñI
    auth.onAuthStateChanged((user) => {
        const loginBtn = document.getElementById('login-btn');
        const userProfileWidget = document.getElementById('user-profile-widget');

        if (user) {
            currentUser = user;
            loginBtn.classList.add('hidden');
            userProfileWidget.classList.remove('hidden');

            const userAvatarBtn = document.getElementById('user-avatar-btn');
            const logoutBtn = document.getElementById('logout-btn');

            document.getElementById('user-avatar').src = user.photoURL || `https://ui-avatars.com/api/?name=${user.displayName || 'A'}&background=random`;

            userAvatarBtn.onclick = function() {
                this.parentElement.classList.toggle('is-open');
            };

            logoutBtn.onclick = () => {
                auth.signOut();
            };

            // M·ªü kh√≥a c√°c n√∫t y√™u c·∫ßu ƒëƒÉng nh·∫≠p
            [addLocationBtn, listBtn].forEach(btn => {
                btn.disabled = false;
                btn.classList.remove('opacity-50', 'cursor-not-allowed');
            });
        } else {
            currentUser = null;
            loginBtn.classList.remove('hidden');
            userProfileWidget.classList.add('hidden');
            userProfileWidget.classList.remove('is-open');

            exitAllModes();

            // Kh√≥a c√°c n√∫t y√™u c·∫ßu ƒëƒÉng nh·∫≠p
            [addLocationBtn, listBtn].forEach(btn => {
                btn.disabled = true;
                btn.classList.add('opacity-50', 'cursor-not-allowed');
            });
        }
    });

    loginBtn.addEventListener('click', () => {
        if (ui.isPendingRedirect()) return;
        firebaseuiContainer.classList.remove('hidden');
        ui.start('#firebaseui-widget', {
            signInFlow: 'popup',
            signInOptions: [
                firebase.auth.GoogleAuthProvider.PROVIDER_ID,
                firebase.auth.EmailAuthProvider.PROVIDER_ID,
            ],
            callbacks: {
                signInSuccessWithAuthResult: function(authResult, redirectUrl) {
                    firebaseuiContainer.classList.add('hidden');
                    return false;
                }
            }
        });
    });

    logoutBtn.addEventListener('click', () => auth.signOut());
    firebaseuiContainer.addEventListener('click', (e) => {
        if (e.target === firebaseuiContainer) firebaseuiContainer.classList.add('hidden');
    });

    // --- LOGIC D·ªÆ LI·ªÜU (FIRESTORE) ---    
    const listingsCol = db.collection("listings");
    const q = listingsCol.where("status", "==", "approved").orderBy("createdAt", "desc");

    // ‚úÖ THAY TH·∫æ TO√ÄN B·ªò H√ÄM q.onSnapshot C≈® B·∫∞NG H√ÄM N√ÄY

    q.onSnapshot((querySnapshot) => {
        priceMarkers.clearLayers();
        const priceList = document.getElementById('price-list');
        priceList.innerHTML = '';
        // Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ h√†m showToast v√† yellowIcon ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ·ªü n∆°i kh√°c
        // document.getElementById('loading-spinner').style.display = 'none';

        if (querySnapshot.empty) {
            priceList.innerHTML = '<p class="text-center text-gray-500 py-4">üì≠ Kh√¥ng c√≥ d·ªØ li·ªáu.</p>';
            return;
        }

        const allMarkers = {}; // D√πng ƒë·ªÉ l∆∞u tr·ªØ t·∫•t c·∫£ marker ƒë√£ t·∫°o

        querySnapshot.forEach((doc) => {
            const item = doc.data();
            if (!item.lat || !item.lng) return;

            const formattedPrice = `${item.priceValue} ${item.priceUnit}`;
            
            // Code t·∫°o popupContent c·ªßa b·∫°n gi·ªØ nguy√™n ·ªü ƒë√¢y
            const popupContent = `
                <div class="p-2 text-sm leading-5 space-y-2 max-w-[260px]">
                    <h3 class="font-bold text-base text-gray-800">${item.name}</h3>
                    <p><strong>Gi√°:</strong> <span class="font-semibold text-red-600">${formattedPrice}</span></p>
                    <p><strong>Di·ªán t√≠ch:</strong> ${item.area ? item.area + ' m¬≤' : 'N/A'}</p>
                    <p><strong>Ghi ch√∫:</strong> ${item.notes || 'N/A'}</p>
                    ${// Thay th·∫ø to√†n b·ªô kh·ªëi IIFE c≈© trong popupContent
                (() => {
                    // 1. T·∫°o permalink v√† tin nh·∫Øn m·∫∑c ƒë·ªãnh
                    const permalink = `${window.location.origin}?lat=${item.lat}&lng=${item.lng}`;
                    const message = `Ch√†o b·∫°n, t√¥i quan t√¢m ƒë·∫øn ƒë·ªãa ƒëi·ªÉm '${item.name}' t·∫°i XemGiaDat.com. Link: ${permalink}`;
                    const encodedMessage = encodeURIComponent(message);
                    const encodedPermalink = encodeURIComponent(permalink);

                    // 2. T·∫°o HTML cho c√°c n√∫t li√™n h·ªá
                    let contactHTML = '<div class="flex space-x-3 text-xl justify-start pt-1">';
                    if (item.contactPhone) {
                        contactHTML += `<a href="tel:${item.contactPhone}" title="G·ªçi ƒëi·ªán"><i class="fas fa-phone text-red-500 hover:scale-110"></i></a>`;
                        contactHTML += `<a href="https://zalo.me/${item.contactPhone}?text=${encodedMessage}" target="_blank" title="Nh·∫Øn tin Zalo"><i class="fas fa-comment-dots text-blue-500 hover:scale-110"></i></a>`;
                        contactHTML += `<a href="https://wa.me/${item.contactPhone}?text=${encodedMessage}" target="_blank" title="Nh·∫Øn tin WhatsApp"><i class="fab fa-whatsapp text-green-500 hover:scale-110"></i></a>`;
                    }
                    if (item.contactEmail) {
                        const mailtoLink = `mailto:${item.contactEmail}?subject=${encodeURIComponent(`H·ªèi v·ªÅ ƒë·ªãa ƒëi·ªÉm: ${item.name}`)}&body=${encodedMessage}`;
                        contactHTML += `<a href="${mailtoLink}" title="G·ª≠i Email"><i class="fas fa-envelope text-yellow-500 hover:scale-110"></i></a>`;
                    }
                    if (item.contactFacebook) {
                        contactHTML += `<a href="${item.contactFacebook}" target="_blank" title="Facebook"><i class="fab fa-facebook text-blue-700 hover:scale-110"></i></a>`;
                    }
                    contactHTML += '</div>';

                    // 3. T·∫°o HTML cho n√∫t Street View
                    const streetViewLink = `https://www.google.com/maps?q&layer=c&cbll=${item.lat},${item.lng}`;
                    const streetViewHTML = `<div><a href="${streetViewLink}" target="_blank" class="block mt-2 px-3 py-1 text-center text-sm font-semibold bg-green-100 text-green-800 rounded hover:bg-green-200">üëÅÔ∏è Xem Street View</a></div>`;

                    // 4. T·∫°o HTML cho c√°c n√∫t h√†nh ƒë·ªông (Like, Share)
                    const likeCount = item.likeCount || 0;
                    let actionsHTML = `<hr class="my-2"><div class="flex items-center justify-between pt-1">`;
                    actionsHTML += `<button onclick="likePlace('${doc.id}')" class="text-red-500 text-lg">‚ù§Ô∏è <span id="like-${doc.id}">${likeCount}</span></button>`;
                    actionsHTML += `<a href="https://www.facebook.com/sharer/sharer.php?u=${encodedPermalink}" target="_blank" title="Chia s·∫ª Facebook"><i class="fas fa-share text-gray-600 hover:text-blue-600"></i></a>`;
                    actionsHTML += `</div>`;

                    // 5. Tr·∫£ v·ªÅ to√†n b·ªô chu·ªói HTML ƒë∆∞·ª£c t·∫°o ra
                    return contactHTML + streetViewHTML + actionsHTML;
                })()}
                </div>`;
            
            const marker = L.marker([item.lat, item.lng]).bindPopup(popupContent);
            priceMarkers.addLayer(marker);
            allMarkers[doc.id] = marker; // L∆∞u l·∫°i marker v·ªõi key l√† ID c·ªßa document

            // T·∫°o danh s√°ch b√™n tr√°i
            const listItem = document.createElement('div');
            listItem.className = 'p-2 border-b cursor-pointer hover:bg-gray-100';
            listItem.innerHTML = `<p class="font-semibold">${item.name}</p><p class="text-sm text-red-600">${formattedPrice}</p>`;
            listItem.onclick = () => {
                // listModal.classList.add('hidden');
                map.setView([item.lat, item.lng], 18);
                marker.openPopup();
            };
            priceList.appendChild(listItem);
        });

        // --- B·∫ÆT ƒê·∫¶U CODE M·ªöI: X·ª¨ L√ù LINK CHIA S·∫∫ SAU KHI D·ªÆ LI·ªÜU ƒê√É T·∫¢I ---
        try {
            const urlParams = new URLSearchParams(window.location.search);
            const lat = urlParams.get('lat');
            const lng = urlParams.get('lng');

            if (lat && lng) {
                const sharedLatLng = L.latLng(parseFloat(lat), parseFloat(lng));
                let minDistance = Infinity;
                let closestDocId = null;

                // 1. T√¨m ƒëi·ªÉm ghim g·∫ßn nh·∫•t v·ªõi v·ªã tr√≠ ƒë∆∞·ª£c chia s·∫ª
                querySnapshot.forEach(doc => {
                    const item = doc.data();
                    const itemLatLng = L.latLng(item.lat, item.lng);
                    const distance = sharedLatLng.distanceTo(itemLatLng);
                    if (distance < minDistance) {
                        minDistance = distance;
                        closestDocId = doc.id;
                    }
                });

                // 2. N·∫øu ƒëi·ªÉm g·∫ßn nh·∫•t ·ªü trong ph·∫°m vi 5 m√©t, coi nh∆∞ tr√πng kh·ªõp
                if (closestDocId && minDistance < 5) {
                    const foundMarker = allMarkers[closestDocId];
                    map.setView(sharedLatLng, 19);
                    foundMarker.openPopup(); // M·ªü popup c·ªßa ch√≠nh ghim ƒë√≥
                } else {
                    // N·∫øu kh√¥ng, ch·ªâ zoom v√† hi·ªÉn th·ªã ghim chung chung
                    map.setView(sharedLatLng, 19);
                    L.marker(sharedLatLng).addTo(map)
                        .bindPopup("<strong>V·ªã tr√≠ ƒë∆∞·ª£c chia s·∫ª</strong>").openPopup();
                }
            }
        } catch (error) {
            console.error("L·ªói khi x·ª≠ l√Ω URL ƒë∆∞·ª£c chia s·∫ª:", error);
        }
        // --- K·∫æT TH√öC CODE M·ªöI ---
    });

    // --- S·ª∞ KI·ªÜN SUBMIT FORM TH√äM ƒê·ªäA ƒêI·ªÇM ---
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const submitBtn = document.getElementById('submit-form-btn');
        if (!currentUser) return alert("Vui l√≤ng ƒëƒÉng nh·∫≠p.");

        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        if (!selectedCoords || !data.name || !data.priceValue) {
            return alert('Vui l√≤ng ƒëi·ªÅn c√°c tr∆∞·ªùng b·∫Øt bu·ªôc.');
        }

        submitBtn.textContent = 'ƒêang g·ª≠i...';
        submitBtn.disabled = true;

        try {
            const docData = {
                userId: currentUser.uid,
                userName: currentUser.displayName,
                userAvatar: currentUser.photoURL,
                lat: selectedCoords.lat,
                lng: selectedCoords.lng,
                priceValue: parseFloat(data.priceValue),
                area: data.area ? parseFloat(data.area) : null,
                status: 'approved', // D·ªØ li·ªáu m·ªõi n√™n ·ªü tr·∫°ng th√°i ch·ªù duy·ªát
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                name: data.name,
                priceUnit: data.priceUnit,
                notes: data.notes || '',
                contactName: data.contactName || '',
                contactEmail: data.contactEmail || '',
                contactPhone: data.contactPhone || '',
                contactFacebook: data.contactFacebook || ''
            };
            
            await listingsCol.add(docData);
            
            alert('G·ª≠i d·ªØ li·ªáu th√†nh c√¥ng, c·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥ng g√≥p!');
            modal.classList.add('hidden');
            form.reset();
            exitAllModes();
        } catch (error) {
            console.error("L·ªói khi th√™m d·ªØ li·ªáu: ", error);
            alert("ƒê√£ x·∫£y ra l·ªói khi g·ª≠i d·ªØ li·ªáu.");
        } finally {
            submitBtn.textContent = 'G·ª≠i D·ªØ Li·ªáu';
            submitBtn.disabled = false;
        }
    });
});

