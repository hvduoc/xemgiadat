// --- FIREBASE CONFIGURATION ---
const firebaseConfig = {
    apiKey: "AIzaSyDu9tYpJdMPT7Hvk2_Ug8XHwxRQXoakRfs",
    authDomain: "xemgiadat-dfe15.firebaseapp.com",
    projectId: "xemgiadat-dfe15",
    storageBucket: "xemgiadat-dfe15.appspot.com",
    messagingSenderId: "361952598367",
    appId: "1:361952598367:web:c1e2e3b1a6d5d8c797beea",
    measurementId: "G-XT932D9N1N"
};

// --- MAPBOX ACCESS TOKEN ---
const mapboxAccessToken = "pk.eyJ1IjoiaHZkdW9jIiwiYSI6ImNtZDFwcjVxYTAzOGUybHEzc3ZrNTJmcnIifQ.D5VlPC8c_n1i3kezgqtzwg";

// --- SERVICE INITIALIZATION ---
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const db = firebase.firestore();

async function getCachedAddress(lat, lng) {
  const key = `addr:${lat.toFixed(5)},${lng.toFixed(5)}`;
  const cached = localStorage.getItem(key);
  if (cached) return cached;

  try {
    const endpointUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?access_token=${mapboxAccessToken}&language=vi&limit=1`;
    const response = await fetch(endpointUrl);
    const data = await response.json();
    const result = data.features?.[0]?.place_name || 'Kh√¥ng x√°c ƒë·ªãnh';
    localStorage.setItem(key, result);
    return result;
  } catch (err) {
    console.error('L·ªói khi l·∫•y ƒë·ªãa ch·ªâ:', err);
    return 'Kh√¥ng x√°c ƒë·ªãnh';
  }
}


// --- APPLICATION LOGIC WRAPPER ---
document.addEventListener('DOMContentLoaded', () => {

    // --- MAP AND LAYERS INITIALIZATION ---
    const map = L.map('map', { center: [16.054456, 108.202167], zoom: 13, zoomControl: false });
    const myAttribution = '¬© XemGiaDat | D·ªØ li·ªáu ¬© S·ªü TNMT ƒê√† N·∫µng';        
    const googleStreets = L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',{ maxZoom: 20, subdomains:['mt0','mt1','mt2','mt3'], attribution: myAttribution + ' | ¬© Google Maps' });
    const googleSat = L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}',{ maxZoom: 20, subdomains:['mt0','mt1','mt2','mt3'], attribution: myAttribution + ' | ¬© Google Satellite' });
    const osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 19, attribution: myAttribution + ' | ¬© OpenStreetMap' });
    
    // --- ƒêO·∫†N CODE T√çCH H·ª¢P B·∫¢N ƒê·ªí PH√ÇN L√î T·ª™ MAPBOX ---

    // 1. Th√¥ng tin t·ª´ t√†i kho·∫£n Mapbox c·ªßa b·∫°n
    const mapboxAccessToken = 'pk.eyJ1IjoiaHZkdW9jIiwiYSI6ImNtZDFwcjVxYTAzOGUybHEzc3ZrNTJmcnIifQ.D5VlPC8c_n1i3kezgqtzwg'; // Token b·∫°n ƒë√£ cung c·∫•p
    const tilesetId = 'hvduoc.danang_parcels_final'; // ID c·ªßa tileset ƒë√£ upload th√†nh c√¥ng

    // Bi·∫øn ƒë·ªÉ l∆∞u l·ªõp highlight
    let highlightedFeature = null;

    // 2. URL ƒë·ªÉ t·∫£i vector tiles
    const tileUrl = `https://api.mapbox.com/v4/${tilesetId}/{z}/{x}/{y}.mvt?access_token=${mapboxAccessToken}`;

    // 3. T√πy ch·ªçn cho l·ªõp vector tiles
    const vectorTileOptions = {
        rendererFactory: L.canvas.tile,
        vectorTileLayerStyles: {
            // T√™n layer b√™n trong file mbtiles, ƒë√£ x√°c nh·∫≠n l√† 'danang_full'
            'danang_full': {
                color: "#FBBF24", // M√†u v√†ng-cam cho n·ªïi b·∫≠t
                weight: 1,
                fillOpacity: 0.1,
                fillColor: "#FBBF24",
                fill: true
            }
        },
        interactive: true, // Cho ph√©p t∆∞∆°ng t√°c (click)
        getFeatureId: function(feature) {
            return feature.properties.OBJECTID; // D√πng OBJECTID l√†m m√£ ƒë·ªãnh danh duy nh·∫•t
        }
    };

    // 4. T·∫°o l·ªõp b·∫£n ƒë·ªì ph√¢n l√¥ v√† x·ª≠ l√Ω s·ª± ki·ªán click
    const parcelLayer = L.vectorGrid.protobuf(tileUrl, vectorTileOptions)
        .on('click', function(e) {
            const props = e.layer.properties;
            const latLng = e.latlng;

            // X√≥a highlight c≈© (n·∫øu c√≥)
            if (highlightedFeature) {
                parcelLayer.resetFeatureStyle(highlightedFeature);
            }

            // Highlight th·ª≠a ƒë·∫•t m·ªõi ƒë∆∞·ª£c ch·ªçn
            highlightedFeature = props.OBJECTID;
            parcelLayer.setFeatureStyle(highlightedFeature, {
                color: '#EF4444', // M√†u ƒë·ªè
                weight: 3,
                fillColor: '#EF4444',
                fillOpacity: 0.3
            });

            // Chu·∫©n h√≥a t√™n thu·ªôc t√≠nh ƒë·ªÉ h√†m showInfoPanel c√≥ th·ªÉ ƒë·ªçc ƒë∆∞·ª£c
            const formattedProps = {
                'S·ªë th·ª≠a': props.SoThuaTuThua,
                'S·ªë hi·ªáu t·ªù b·∫£n ƒë·ªì': props.SoHieuToBanDo,
                'Di·ªán t√≠ch': props.DienTich,
                'K√Ω hi·ªáu m·ª•c ƒë√≠ch s·ª≠ d·ª•ng': props.KyHieuMucDichSuDung,
                'MaXa': props.MaXa,
                'OBJECTID': props.OBJECTID
            };

            // Hi·ªÉn th·ªã th√¥ng tin
            showInfoPanel('Th√¥ng tin Th·ª≠a ƒë·∫•t', formattedProps, latLng.lat, latLng.lng);
        })
        .addTo(map);

    // --- K·∫æT TH√öC ƒêO·∫†N CODE T√çCH H·ª¢P ---
    //const parcelLayer = L.esri.dynamicMapLayer({    url: '/.netlify/functions/proxy/server/rest/services/DiaChinh/DaNangLand_DiaChinh/MapServer', opacity: 0.7});    
   
    const baseMaps = { "·∫¢nh v·ªá tinh": googleSat, "B·∫£n ƒë·ªì ƒë∆∞·ªùng": googleStreets, "OpenStreetMap": osmLayer };
    const overlayMaps = { "üó∫Ô∏è B·∫£n ƒë·ªì ph√¢n l√¥": parcelLayer };   
    googleStreets.addTo(map);    
    //parcelLayer.addTo(map);
    L.control.layers(baseMaps, overlayMaps, { position: 'bottomright' }).addTo(map);

        // --- DOM ELEMENT SELECTION (ƒê√É S·ª¨A) ---
    const modal = document.getElementById('form-modal');
    const listModal = document.getElementById('price-list-modal');
    const form = document.getElementById('location-form');
    const instructionBanner = document.getElementById('instruction-banner');
    const authContainer = document.getElementById('auth-container');
    const loginBtn = document.getElementById('login-btn');
    const userProfileDiv = document.getElementById('user-profile');
    const profileMenu = document.getElementById('profile-menu');
    const updateProfileBtn = document.getElementById('update-profile-btn');
    const logoutBtnMenu = document.getElementById('logout-btn-menu');
    const firebaseuiContainer = document.getElementById('firebaseui-auth-container');
    const ui = new firebaseui.auth.AuthUI(auth);
    const opacityControl = document.getElementById('opacity-control');
    const opacitySlider = document.getElementById('opacity-slider');
    const donateBtn = document.getElementById('donate-btn');
    const donateModal = document.getElementById('donate-modal');
    const closeDonateModalBtn = document.getElementById('close-donate-modal');
    const copyBtn = document.getElementById('copy-stk-btn');
    const accountNumber = document.getElementById('bank-account-number').textContent;
    const addLocationBtn = document.getElementById('add-location-btn');
    const listBtn = document.getElementById('list-btn');
    const queryBtn = document.getElementById('query-btn');
    const searchInput = document.getElementById('search-input');
    const searchResultsContainer = document.getElementById('search-results');
    const infoPanel = document.getElementById('info-panel');
    const panelTitle = document.getElementById('panel-title');
    const panelContent = document.getElementById('panel-content');
    const closePanelBtn = document.getElementById('close-panel-btn');
    const togglePanelBtn = document.getElementById('toggle-panel-btn');
    const locateBtn = document.getElementById('locate-btn');
    const actionToolbar = document.getElementById('action-toolbar');
    // TH√äM C√ÅC BI·∫æN M·ªöI CHO MODAL LI√äN H·ªÜ
    const contactInfoBtn = document.getElementById('contact-info-btn');
    const contactInfoModal = document.getElementById('contact-info-modal');
    const closeContactModalBtn = document.getElementById('close-contact-modal');

    // --- STATE & GLOBAL VARIABLES ---
    let currentUser = null;
    let tempMarker = null;
    let selectedCoords = null;
    let isAddMode = false;
    let isQueryMode = false;
    let localListings = [];
    let debounceTimer;
    let highlightedParcel = null; 
    let dimensionMarkers = L.layerGroup();
    let userLocationMarker = null;
    let priceMarkers = L.markerClusterGroup({
        iconCreateFunction: function (cluster) {
            const count = cluster.getChildCount();
            let size = ' marker-cluster-';
            if (count < 10) size += 'small'; else if (count < 100) size += 'medium'; else size += 'large';
            return new L.DivIcon({ html: '<div><span>' + count + '</span></div>', className: 'marker-cluster marker-cluster-yellow' + size, iconSize: new L.Point(40, 40) });
        }
    }).addTo(map);

    // --- HELPER FUNCTIONS ---
    
    window.openStreetView = function(lat, lng) {
        const url = `https://www.google.com/maps?q=&layer=c&cbll=${lat},${lng}`;
        window.open(url, '_blank');
    };
   
    function showInfoPanel(title, props, lat, lng) {
        infoPanel.classList.remove('is-collapsed');
        togglePanelBtn.querySelector('i').classList.replace('fa-chevron-up', 'fa-chevron-down');

        panelTitle.textContent = title;
        const soTo = props['S·ªë hi·ªáu t·ªù b·∫£n ƒë·ªì'] ?? 'N/A';
        const soThua = props['S·ªë th·ª≠a'] ?? 'N/A';
        const loaiDat = props['K√Ω hi·ªáu m·ª•c ƒë√≠ch s·ª≠ d·ª•ng'] ?? 'N/A';
        const dienTich = props['Di·ªán t√≠ch'] ? parseFloat(props['Di·ªán t√≠ch']).toFixed(1) : 'N/A';
        const diaChi = (props['ƒê·ªãa ch·ªâ'] && props['ƒê·ªãa ch·ªâ'] !== 'Null') ? props['ƒê·ªãa ch·ªâ'] : 'Ch∆∞a c√≥';

        panelContent.innerHTML = `
        
        <div class="info-row">
            <span class="info-label">T·ªù:</span><strong class="info-value">${soTo}</strong>
            <span class="info-label ml-4">Th·ª≠a:</span><strong class="info-value">${soThua}</strong>
        </div>
        <div class="info-row">
            <span class="info-label">Lo·∫°i ƒë·∫•t:</span><strong class="info-value">${loaiDat}</strong>
            <span class="info-label ml-4">Di·ªán t√≠ch:</span><strong class="info-value">${dienTich} m¬≤</strong>
        </div>
        <div class="info-row">
            <span class="info-label">ƒê·ªãa ch·ªâ:</span><span class="info-value text-left flex-1">${diaChi}</span>
        </div>            

        <div id="panel-actions">
            <button onclick="getDirections(${lat}, ${lng})">
                <i class="icon fas fa-directions text-blue-600"></i>
                <span class="text">Ch·ªâ ƒë∆∞·ªùng</span>
            </button>
            <button onclick="openStreetView(${lat}, ${lng})">
                <i class="icon fas fa-street-view text-green-600"></i>
                <span class="text">Street View</span>
            </button>
            <button onclick="copyLocationLink(${lat}, ${lng})">
                <i class="icon fas fa-link text-gray-500"></i>
                <span class="text">Sao ch√©p</span>
            </button>
            <button onclick="toggleShareMenu()" id="share-btn">
                <i class="icon fas fa-share-alt text-indigo-600"></i>
                <span class="text">Chia s·∫ª</span>
            </button>

            <div id="share-submenu">
            <button onclick="share('facebook', ${lat}, ${lng}, '${soTo}', '${soThua}')" title="Facebook">
                <i class="icon fab fa-facebook-f text-blue-700"></i>
            </button>
            <button onclick="share('whatsapp', ${lat}, ${lng}, '${soTo}', '${soThua}')" title="WhatsApp">
                <i class="icon fab fa-whatsapp text-green-500"></i>
            </button>
            </div>
        </div>
        `;


        infoPanel.classList.add('is-open');
        actionToolbar.classList.add('is-raised');
    }                
  

    // THAY TH·∫æ TO√ÄN B·ªò H√ÄM C≈® B·∫∞NG PHI√äN B·∫¢N ƒê√öNG N√ÄY

    async function showListingInfoPanel(item) {
        // 1. CHU·∫®N B·ªä T·∫§T C·∫¢ D·ªÆ LI·ªÜU C·∫¶N THI·∫æT
        
        // a. L·∫•y th√¥ng tin qu·∫£n tr·ªã vi√™n v√† c√°c ph·∫ßn t·ª≠ DOM
        const ADMIN_UID = "FEpPWWT1EaTWQ9FOqBxWN5FeEJk1"; 
        const currentUser = firebase.auth().currentUser;
        const isAdmin = currentUser && currentUser.uid === ADMIN_UID;
        const infoPanel = document.getElementById('info-panel');
        const panelTitle = document.getElementById('panel-title');
        const panelContent = document.getElementById('panel-content');
        
        // b. L·∫•y th√¥ng tin h·ªì s∆° ng∆∞·ªùi ƒëƒÉng
        let userProfile = {
            name: item.userName || 'Ng∆∞·ªùi d√πng ·∫©n danh',
            avatar: item.userAvatar || 'https://placehold.co/60x60/e2e8f0/64748b?text=A',
        };
        
        // c. L·∫•y ƒë·ªãa ch·ªâ theo th·ªùi gian th·ª±c
        let fetchedAddress = 'ƒêang t·∫£i ƒë·ªãa ch·ªâ...';
        try {
            fetchedAddress = await getCachedAddress(item.lat, item.lng);

        } catch (error) { fetchedAddress = 'L·ªói khi t·∫£i ƒë·ªãa ch·ªâ.'; }

        // d. Chu·∫©n b·ªã c√°c d·ªØ li·ªáu tin ƒëƒÉng kh√°c
        const price = `${item.priceValue} ${item.priceUnit}`;
        const area = item.area ? `${item.area} m¬≤` : 'N/A';
        const notes = item.notes || 'Kh√¥ng c√≥';
        const lat = item.lat.toFixed(6);
        const lng = item.lng.toFixed(6);

        // e. T·∫°o HTML cho n√∫t X√≥a (ch·ªâ khi l√† admin)
        let adminDeleteButtonHtml = '';
        if (isAdmin) {
            adminDeleteButtonHtml = `<a class="action-button admin-delete-button" onclick="deleteListing('${item.id}')">
                <i class="fas fa-trash-alt"></i>
                <span>X√≥a tin</span>
            </a>`;
        }

        // f. T·∫°o HTML cho c√°c n√∫t li√™n h·ªá (ch·ªâ khi c√≥ d·ªØ li·ªáu)
        let contactIconsHtml = '';
        if (item.contactPhone) {
            contactIconsHtml += `<a href="tel:${item.contactPhone}" class="contact-button" title="G·ªçi ƒëi·ªán"><i class="fas fa-phone-alt"></i></a>`;
            contactIconsHtml += `<a href="https://wa.me/${item.contactPhone.replace(/[^0-9]/g, '')}" target="_blank" class="contact-button" title="WhatsApp"><i class="fab fa-whatsapp"></i></a>`;
            contactIconsHtml += `<a href="https://zalo.me/${item.contactPhone.replace(/[^0-9]/g, '')}" target="_blank" class="contact-button" title="Zalo"><i class="fas fa-comment-dots"></i></a>`;
        }
        if (item.contactEmail) { 
            contactIconsHtml += `<a href="mailto:${item.contactEmail}" class="contact-button" title="Email"><i class="fas fa-envelope"></i></a>`; 
        }
        if (item.contactFacebook) {
            const fbLink = item.contactFacebook.startsWith('http') ? item.contactFacebook : `https://facebook.com/${item.contactFacebook}`;
            contactIconsHtml += `<a href="${fbLink}" target="_blank" class="contact-button" title="Xem trang Facebook c·ªßa ng∆∞·ªùi ƒëƒÉng"><i class="fab fa-facebook"></i></a>`;
        }

        // 2. T·∫†O GIAO DI·ªÜN HTML (M·ªòT L·∫¶N DUY NH·∫§T)
        panelTitle.textContent = item.name;
        panelContent.innerHTML = `
            <div class="price-highlight">${price}</div>
            <div class="info-pills">
                <span class="pill-item"><i class="fas fa-ruler-combined"></i> ${area}</span>
                <span class="pill-item"><i class="fas fa-pen"></i> ${notes}</span>
            </div>
            <div class="address-actions-group">
                <div class="address-text"><i class="fas fa-map-marker-alt"></i> ${fetchedAddress}</div>
                <div class="action-buttons-group">
                    <a class="action-button" onclick="getDirections(${lat}, ${lng})">
                        <i class="fas fa-directions"></i>
                        <span>Ch·ªâ ƒë∆∞·ªùng</span>
                    </a>
                    <a class="action-button" onclick="openStreetView(${lat}, ${lng})">
                        <i class="fas fa-street-view"></i>
                        <span>Street View</span>
                    </a>
                    <a class="action-button" onclick="copyLocationLink(${lat}, ${lng})">
                        <i class="fas fa-link"></i>
                        <span>Sao ch√©p</span>
                    </a>
                    ${adminDeleteButtonHtml}
                </div>
            </div>
            <div class="poster-card">
                <img src="${userProfile.avatar}" alt="Avatar" class="poster-avatar-small">
                <div class="poster-name">${userProfile.name}</div>
                <div class="poster-contact-buttons">${contactIconsHtml}</div>
            </div>
        `;

        // 3. HI·ªÇN TH·ªä PANEL
        infoPanel.classList.remove('is-collapsed');
        infoPanel.classList.add('is-open');
    }

    function hideInfoPanel() {
        infoPanel.classList.remove('is-open');
        actionToolbar.classList.remove('is-raised', 'is-partially-raised');
        if (highlightedParcel) map.removeLayer(highlightedParcel);
        dimensionMarkers.clearLayers();
        highlightedParcel = null;
    }
    
    async function loadUserProfile() {
    try {
        const userDoc = await db.collection("users").doc(currentUser.uid).get();
        if (userDoc.exists) {
        const profile = userDoc.data();
        document.getElementById('profile-name').value = profile.displayName || '';
        document.getElementById('profile-email').value = profile.email || '';
        document.getElementById('profile-phone').value = profile.phone || '';
        document.getElementById('profile-zalo').value = profile.zalo || '';
        document.getElementById('profile-whatsapp').value = profile.whatsapp || '';
        document.getElementById('profile-facebook').value = profile.contactFacebook || '';
        }
    } catch (error) {
        console.error("L·ªói t·∫£i h·ªì s∆°:", error);
    }
    }

    
    async function performCadastralQuery(latlng) {
        hideInfoPanel();
        const loadingPopup = L.popup().setLatLng(latlng).setContent('<p>ƒêang t√¨m ki·∫øm th√¥ng tin...</p>').openOn(map);

        try {
            const parcelIdentify = parcelLayer.identify().on(map).at(latlng);
            const featureCollection = await new Promise((resolve, reject) => {
                parcelIdentify.run((error, fc) => error ? reject(error) : resolve(fc));
            });

            if (!featureCollection || featureCollection.features.length === 0) {
                loadingPopup.setContent('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·ªãa ch√≠nh t·∫°i v·ªã tr√≠ n√†y.');
                return;
            }

            map.closePopup(loadingPopup);
            const feature = featureCollection.features[0];
            const props = feature.properties;
            
            // --- N√ÇNG C·∫§P QUAN TR·ªåNG: T√åM ƒê·ªäA CH·ªà T·ª™ T√ÇM TH·ª¨A ƒê·∫§T ---

            // 1. T·∫°o m·ªôt l·ªõp GeoJSON t·∫°m th·ªùi ƒë·ªÉ l·∫•y t√¢m (centroid)
            const tempLayer = L.geoJSON(feature.geometry);
            const parcelCenter = tempLayer.getBounds().getCenter();
            
            // 2. D√πng t·ªça ƒë·ªô c·ªßa T√ÇM ƒë·ªÉ h·ªèi Mapbox
            const centerLat = parcelCenter.lat.toFixed(6);
            const centerLng = parcelCenter.lng.toFixed(6);
            
            const endpointUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${centerLng},${centerLat}.json?access_token=${mapboxAccessToken}&language=vi&limit=1`;
            const mapboxResponse = await fetch(endpointUrl);
            const mapboxData = await mapboxResponse.json();
            
            // 3. G√°n ƒë·ªãa ch·ªâ cu·ªëi c√πng v√†o props ƒë·ªÉ hi·ªÉn th·ªã
            if (mapboxData.features && mapboxData.features.length > 0) {
                props['ƒê·ªãa ch·ªâ'] = mapboxData.features[0].place_name;
            } else {
                // N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c, d√πng t·∫°m ƒë·ªãa ch·ªâ g·ªëc (n·∫øu c√≥)
                props['ƒê·ªãa ch·ªâ'] = (props['ƒê·ªãa ch·ªâ'] && props['ƒê·ªãa ch·ªâ'] !== 'Null') ? props['ƒê·ªãa ch·ªâ'] : 'Ch∆∞a x√°c ƒë·ªãnh';
            }
            // --- K·∫æT TH√öC N√ÇNG C·∫§P ---

            if (highlightedParcel) map.removeLayer(highlightedParcel);
            const outlineStyle = { color: '#4A5568', weight: 5, opacity: 0.7 };
            const fillStyle = { color: '#FFD700', weight: 3, opacity: 1 };
            highlightedParcel = L.layerGroup([
                L.geoJSON(feature.geometry, { style: outlineStyle }),
                L.geoJSON(feature.geometry, { style: fillStyle })
            ]).addTo(map);

            dimensionMarkers.clearLayers();
            const coords = feature.geometry.coordinates[0];
            if (coords.length > 2) {
                for (let i = 0; i < coords.length - 1; i++) {
                    const p1 = coords[i], p2 = coords[i+1];
                    const point1 = L.latLng(p1[1], p1[0]), point2 = L.latLng(p2[1], p2[0]);
                    const distance = point1.distanceTo(point2);
                    const midPoint = L.latLng((point1.lat + point2.lat) / 2, (point1.lng + point2.lng) / 2);
                    const angle = Math.atan2(p2[1] - p1[1], p2[0] - p1[0]) * 180 / Math.PI;
                    const displayDistance = Math.round(distance * 10) / 10;
                    const dimensionLabel = L.marker(midPoint, { icon: L.divIcon({ className: 'dimension-label-container', html: `<div class="dimension-label" style="transform: rotate(${angle}deg);">${displayDistance}</div>` }) });
                    dimensionMarkers.addLayer(dimensionLabel);
                }
                dimensionMarkers.addTo(map);
            }

            // Hi·ªÉn th·ªã panel v·ªõi t·ªça ƒë·ªô c·ªßa ƒëi·ªÉm click ban ƒë·∫ßu
            showInfoPanel('Th√¥ng tin Th·ª≠a ƒë·∫•t', props, latlng.lat.toFixed(6), latlng.lng.toFixed(6));

        } catch (error) {
            console.error("L·ªói khi tra c·ª©u ƒë·ªãa ch√≠nh:", error);
            if(loadingPopup) map.closePopup(loadingPopup);
            L.popup().setLatLng(latlng).setContent('C√≥ l·ªói x·∫£y ra khi tra c·ª©u.').openOn(map);
        }
    }
    
    function handleUrlParameters() {
        const urlParams = new URLSearchParams(window.location.search);
        const lat = urlParams.get('lat');
        const lng = urlParams.get('lng');
        if (lat && lng) {
            const targetLatLng = L.latLng(parseFloat(lat), parseFloat(lng));
            map.setView(targetLatLng, 19);
            setTimeout(() => { performCadastralQuery(targetLatLng); }, 1000); 
        }
    }

    function enterAddMode() {
        exitAllModes();
        isAddMode = true;
        map.getContainer().classList.add('map-add-mode');
        queryBtn.classList.remove('active-tool');
        instructionBanner.textContent = 'Nh·∫•p v√†o b·∫£n ƒë·ªì ƒë·ªÉ ch·ªçn v·ªã tr√≠ c·∫ßn th√™m.';
        instructionBanner.classList.remove('hidden');
    }
    function enterQueryMode() {
        exitAllModes();
        isQueryMode = true;
        map.getContainer().classList.add('map-query-mode');
        queryBtn.classList.add('active-tool');
        instructionBanner.textContent = 'Nh·∫•p v√†o v·ªã tr√≠ tr√™n b·∫£n ƒë·ªì ƒë·ªÉ tra c·ª©u th√¥ng tin th·ª≠a ƒë·∫•t.';
        instructionBanner.classList.remove('hidden');
    }
    function exitAllModes() {
        isAddMode = false;
        isQueryMode = false;
        map.getContainer().classList.remove('map-add-mode', 'map-query-mode');
        queryBtn.classList.remove('active-tool');
        instructionBanner.classList.add('hidden');
        if (tempMarker) {
            map.removeLayer(tempMarker);
            tempMarker = null;
        }
    }
    // ƒê·ªãnh nghƒ©a h√†m prefillUserContact
    async function prefillUserContact() {
    if (!currentUser) return;

    try {
        const userDoc = await db.collection("users").doc(currentUser.uid).get();
        if (userDoc.exists) {
        const profile = userDoc.data();
        document.getElementById('contact-name').value = profile.displayName || '';
        document.getElementById('email').value = profile.email || '';
        document.getElementById('phone').value = profile.phone || '';                           
        document.getElementById('facebook').value = profile.contactFacebook || '';
        }
    } catch (error) {
        console.error("L·ªói khi l·∫•y h·ªì s∆° ng∆∞·ªùi d√πng:", error);
    }
    }   
    
    // D√°n ƒëo·∫°n m√£ ƒë√£ s·ª≠a n√†y v√†o file script.js c·ªßa b·∫°n

    window.deleteListing = async function(listingId) {
        if (!listingId) {
            alert('Kh√¥ng t√¨m th·∫•y ID c·ªßa tin ƒëƒÉng.');
            return;
        }
        
        // H·ªèi l·∫°i ƒë·ªÉ ch·∫Øc ch·∫Øn tr∆∞·ªõc khi x√≥a
        const confirmation = confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a vƒ©nh vi·ªÖn tin ƒëƒÉng n√†y kh√¥ng?');
        
        if (confirmation) {
            try {
                await db.collection('listings').doc(listingId).delete();
                alert('ƒê√£ x√≥a tin ƒëƒÉng th√†nh c√¥ng!');
                hideInfoPanel(); // ƒê√≥ng panel th√¥ng tin l·∫°i
                location.reload(); // T·∫£i l·∫°i trang ƒë·ªÉ c·∫≠p nh·∫≠t b·∫£n ƒë·ªì
            } catch (error) {
                console.error("L·ªói khi x√≥a tin ƒëƒÉng: ", error);
                alert('C√≥ l·ªói x·∫£y ra khi x√≥a tin ƒëƒÉng.');
            }
        }
    }

    window.getDirections = function(toLat, toLng) {
        if (!navigator.geolocation) { alert('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã.'); return; }
        alert('ƒêang l·∫•y v·ªã tr√≠ c·ªßa b·∫°n ƒë·ªÉ ch·ªâ ƒë∆∞·ªùng...');
        navigator.geolocation.getCurrentPosition( (position) => {
            const fromLat = position.coords.latitude;
            const fromLng = position.coords.longitude;
            const url = `https://www.google.com/maps/dir/?api=1&origin=${fromLat},${fromLng}&destination=${toLat},${toLng}`;
            window.open(url, '_blank');
        }, () => {
            alert('Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c v·ªã tr√≠ c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p v·ªã tr√≠ c·ªßa tr√¨nh duy·ªát.');
        });
    };
    window.likePlace = function(id) {
        const el = document.getElementById(`like-${id}`);
        let count = parseInt(localStorage.getItem(`like-${id}`) || 0, 10);
        count++;
        localStorage.setItem(`like-${id}`, count);
        if (el) el.textContent = count;
    };
    window.copyLink = function() {
        navigator.clipboard.writeText(window.location.href).then(() => {
            alert('ƒê√£ sao ch√©p li√™n k·∫øt!');
        });
    }
    window.copyLocationLink = function(lat, lng) {
        const url = `${window.location.origin}${window.location.pathname}?lat=${lat}&lng=${lng}`;
        navigator.clipboard.writeText(url).then(() => {
            alert('ƒê√£ sao ch√©p li√™n k·∫øt v·ªã tr√≠!');
        }).catch(err => console.error('L·ªói sao ch√©p: ', err));
    }
    window.toggleShareMenu = function() {
        const submenu = document.getElementById('share-submenu');
        if (submenu) {
            submenu.classList.toggle('is-visible');
        }
    };

    // X√≥a h√†m shareOnFacebook c≈© v√† thay b·∫±ng h√†m n√†y
    window.share = function(platform, lat, lng, soTo, soThua) {
        const url = `${window.location.origin}${window.location.pathname}?lat=${lat}&lng=${lng}`;
        const text = `Kh√°m ph√° th·ª≠a ƒë·∫•t (T·ªù: ${soTo}, Th·ª≠a: ${soThua}) t·∫°i ƒê√† N·∫µng tr√™n B·∫£n ƒë·ªì Gi√° ƒë·∫•t C·ªông ƒë·ªìng!`;
        let shareUrl = '';

        if (platform === 'facebook') {
            shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(text)}`;
        } else if (platform === 'whatsapp') {
            shareUrl = `https://wa.me/?text=${encodeURIComponent(text + ' ' + url)}`;
        } else if (platform === 'zalo') {
            alert("ƒê·ªÉ chia s·∫ª qua Zalo, vui l√≤ng sao ch√©p li√™n k·∫øt v√† d√°n v√†o Zalo.");
            navigator.clipboard.writeText(url);
            toggleShareMenu(); // ƒê√≥ng menu sau khi th√¥ng b√°o
            return; 
        }

        if (shareUrl) {
            window.open(shareUrl, '_blank', 'width=600,height=400');
        }
        toggleShareMenu(); // T·ª± ƒë·ªông ƒë√≥ng menu sau khi b·∫•m
    };
    window.toggleLike = function(button) {
        const icon = button.querySelector('i');
        if (icon.classList.contains('far')) {
            icon.classList.remove('far');
            icon.classList.add('fas', 'text-red-500');
        } else {
            icon.classList.remove('fas', 'text-red-500');
            icon.classList.add('far');
        }
    }
    
    // --- SEARCH LOGIC ---
    const searchByParcelNumber = async (soTo, soThua) => {
        searchResultsContainer.innerHTML = '<div class="p-4 text-center text-gray-500">ƒêang t√¨m th·ª≠a ƒë·∫•t...</div>';
        searchResultsContainer.classList.remove('hidden');

        let html = '';
        try {
            const response = await fetch(`/.netlify/functions/getParcelInfo?soTo=${soTo}&soThua=${soThua}`);
            const data = await response.json();

            if (data.features && data.features.length > 0) {
                html += `<div class="result-category">K·∫øt qu·∫£ cho T·ªù: ${soTo} / Th·ª≠a: ${soThua}</div>`;
                data.features.forEach(feature => {
                    const diaChi = feature.properties.DiaChiThuaDat || `Th·ª≠a ƒë·∫•t ${soThua}, t·ªù b·∫£n ƒë·ªì ${soTo}`;
                    const geometry = JSON.stringify(feature.geometry);
                    html += `<div class="result-item" data-type="parcel" data-geometry='${geometry}'><i class="icon fa-solid fa-draw-polygon"></i><span>${diaChi}</span></div>`;
                });
            }
        } catch (error) {
            console.error("L·ªói truy v·∫•n th·ª≠a ƒë·∫•t:", error);
        }

        searchResultsContainer.innerHTML = html === '' ? '<div class="p-4 text-center text-gray-500">Kh√¥ng t√¨m th·∫•y th·ª≠a ƒë·∫•t v·ªõi s·ªë t·ªù/s·ªë th·ª≠a n√†y.</div>' : html;
    };

    const performSearch = async (query) => {
        // T·∫°m th·ªùi b·ªè t√≠nh nƒÉng t√¨m theo T·ªù/Th·ª≠a v√¨ server kh√¥ng h·ªó tr·ª£
        // const parcelRegex = /^\s*(\d+)\s*\/\s*(\d+)\s*$/;
        // const match = query.match(parcelRegex);
        if (match) {
            searchByParcelNumber(match[1], match[2]);
            return;
        }
        if (!query) {
            searchResultsContainer.innerHTML = '';
            searchResultsContainer.classList.add('hidden');
            return;
        }
        searchResultsContainer.innerHTML = '<div class="p-4 text-center text-gray-500">ƒêang t√¨m...</div>';
        searchResultsContainer.classList.remove('hidden');
        const listingResults = localListings.filter(item => item.name.toLowerCase().includes(query.toLowerCase()));
        let html = '';
        if (listingResults.length > 0) {
            html += '<div class="result-category">Tin ƒëƒÉng n·ªïi b·∫≠t</div>';
            listingResults.slice(0, 5).forEach(item => {
                html += `<div class="result-item" data-type="listing" data-id="${item.id}"><i class="icon fa-solid fa-tag"></i><div><strong>${item.name}</strong><span class="price">${item.priceValue} ${item.priceUnit}</span></div></div>`;
            });
        }
        const mapCenter = map.getCenter();
        const endpointUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(query)}.json?access_token=${mapboxAccessToken}&country=VN&language=vi&autocomplete=true&proximity=${mapCenter.lng},${mapCenter.lat}`;
        try {
            const response = await fetch(endpointUrl);
            const data = await response.json();
            if (data.features && data.features.length > 0) {
                html += '<div class="result-category">ƒê·ªãa ƒëi·ªÉm</div>';
                data.features.forEach(feature => {
                    html += `<div class="result-item" data-type="location" data-lat="${feature.center[1]}" data-lng="${feature.center[0]}"><i class="icon fa-solid fa-map-marker-alt"></i><span>${feature.place_name}</span></div>`;
                });
            }
        } catch (error) { console.error("L·ªói t√¨m ki·∫øm ƒë·ªãa ch·ªâ Mapbox:", error); }
        searchResultsContainer.innerHTML = html === '' ? '<div class="p-4 text-center text-gray-500">Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.</div>' : html;
    };

    // --- EVENT LISTENERS (ƒê√É S·ª¨A) ---

    // 1. S·ª± ki·ªán khi click v√†o avatar -> Hi·ªán/·∫©n menu
    userProfileDiv.addEventListener('click', (event) => {
        event.stopPropagation(); // NgƒÉn s·ª± ki·ªán click lan ra ngo√†i
        profileMenu.classList.toggle('hidden');
    });

    // 2. S·ª± ki·ªán khi click v√†o n√∫t "C·∫≠p nh·∫≠t h·ªì s∆°" trong menu
    updateProfileBtn.addEventListener('click', (e) => {
        e.preventDefault(); // NgƒÉn th·∫ª <a> t·∫£i l·∫°i trang
        if (!currentUser) return;
        loadUserProfile();
        document.getElementById('profile-modal').classList.remove('hidden');
        profileMenu.classList.add('hidden'); // ·∫®n menu ƒëi sau khi ch·ªçn
    });

    // 3. S·ª± ki·ªán khi click v√†o n√∫t "Tho√°t" trong menu
    logoutBtnMenu.addEventListener('click', (e) => {
        e.preventDefault(); // NgƒÉn th·∫ª <a> t·∫£i l·∫°i trang
        auth.signOut();
        profileMenu.classList.add('hidden'); // ·∫®n menu ƒëi
    });

    // 4. T·ª± ƒë·ªông ƒë√≥ng menu khi ng∆∞·ªùi d√πng click ra ngo√†i
    document.addEventListener('click', (event) => {
        // N·∫øu menu ƒëang kh√¥ng ·∫©n V√Ä v·ªã tr√≠ click kh√¥ng n·∫±m trong khu v·ª±c avatar
        if (!profileMenu.classList.contains('hidden') && !userProfileDiv.contains(event.target) && !profileMenu.contains(event.target)) {
            profileMenu.classList.add('hidden');
        }
    });   
     // TH√äM EVENT LISTENER M·ªöI CHO MODAL LI√äN H·ªÜ
    contactInfoBtn.addEventListener('click', () => {
        contactInfoModal.classList.remove('hidden');
    });

    closeContactModalBtn.addEventListener('click', () => {
        contactInfoModal.classList.add('hidden');
    });

    contactInfoModal.addEventListener('click', (e) => {
        // N·∫øu click v√†o v√πng n·ªÅn m·ªù b√™n ngo√†i th√¨ ƒë√≥ng modal
        if (e.target === contactInfoModal) {
            contactInfoModal.classList.add('hidden');
        }
    });
    
    // logoutBtn.addEventListener('click', () => auth.signOut()); // <--- X√ìA D√íNG N√ÄY
    searchInput.addEventListener('input', (e) => { clearTimeout(debounceTimer); debounceTimer = setTimeout(() => { performSearch(e.target.value.trim()); }, 300); });
    searchResultsContainer.addEventListener('click', (e) => {
        const item = e.target.closest('.result-item');
        if (!item) return;
        hideInfoPanel();
        const type = item.dataset.type;
        if (type === 'location') {
            map.setView([parseFloat(item.dataset.lat), parseFloat(item.dataset.lng)], 17);
        } else if (type === 'listing') {
            const listing = localListings.find(l => l.id === item.dataset.id);
            if (listing) {
                map.setView([listing.lat, listing.lng], 18);
                priceMarkers.eachLayer(marker => { if (marker.getLatLng().lat === listing.lat && marker.getLatLng().lng === listing.lng) marker.openPopup(); });
            }
        } else if (type === 'parcel') {
            const geometry = JSON.parse(item.dataset.geometry);
            const outlineStyle = { color: '#4A5568', weight: 5, opacity: 0.7 };
            const fillStyle = { color: '#FFD700', weight: 3, opacity: 1 };
            const outlineLayer = L.geoJSON(geometry, { style: outlineStyle });
            const fillLayer = L.geoJSON(geometry, { style: fillStyle });
            highlightedParcel = L.layerGroup([outlineLayer, fillLayer]).addTo(map);
            map.fitBounds(L.geoJSON(geometry).getBounds());
            // G·ªçi truy v·∫•n th√¥ng tin ƒë·ªãa ch√≠nh (gi·ªëng nh∆∞ click)
            const bounds = L.geoJSON(geometry).getBounds();
            const center = bounds.getCenter();
            performCadastralQuery(center);

        }
        searchResultsContainer.classList.add('hidden');
        searchInput.value = '';
    });
    closePanelBtn.addEventListener('click', hideInfoPanel);
    togglePanelBtn.addEventListener('click', () => {
        const isCollapsed = infoPanel.classList.toggle('is-collapsed');
        const icon = togglePanelBtn.querySelector('i');
        icon.classList.toggle('fa-chevron-down');
        icon.classList.toggle('fa-chevron-up');

        if (isCollapsed) {
            actionToolbar.classList.remove('is-raised');
            actionToolbar.classList.add('is-partially-raised');
        } else {
            actionToolbar.classList.remove('is-partially-raised');
            actionToolbar.classList.add('is-raised');
        }
    });


    locateBtn.addEventListener('click', () => {
        if (!navigator.geolocation) { return alert('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã.'); }
        map.locate({ setView: true, maxZoom: 16 });
    });
    map.on('locationfound', function(e) {
        if (userLocationMarker) { map.removeLayer(userLocationMarker); }
        const radius = e.accuracy / 2;
        userLocationMarker = L.marker(e.latlng).addTo(map).bindPopup(`V·ªã tr√≠ c·ªßa b·∫°n (trong b√°n k√≠nh ${radius.toFixed(0)}m)`).openPopup();
    });
    map.on('locationerror', function(e) { alert("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ c·ªßa b·∫°n: " + e.message); });
    map.on('click', function(e) {
        searchResultsContainer.classList.add('hidden');
        hideInfoPanel();
        if (isAddMode) {
            if (!currentUser) { alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m ƒë·ªãa ƒëi·ªÉm!"); exitAllModes(); return; }
            selectedCoords = e.latlng;
            tempMarker = L.marker(selectedCoords).addTo(map);
            modal.classList.remove('hidden');
            const geocodeService = L.esri.Geocoding.geocodeService();
            geocodeService.reverse().latlng(selectedCoords).run(function (error, result) { if (error || !result.address) { document.getElementById('address-input').value = 'Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ'; } else { document.getElementById('address-input').value = result.address.Match_addr; } });
        } 
        else if (isQueryMode) {
            performCadastralQuery(e.latlng);
        }
    });

    // Thay ƒë·ªïi c√°ch ƒë·∫∑t ƒë·ªô trong su·ªët ƒë·ªÉ √°p d·ª•ng cho c·∫£ nh√≥m layer
    opacitySlider.addEventListener('input', (e) => {
        parcelLayersGroup.setStyle({ 
            opacity: e.target.value, 
            fillOpacity: e.target.value * 0.1 // Gi·ªØ cho v√πng t√¥ b√™n trong m·ªù h∆°n
        });
    });

    // Thay ƒë·ªïi c√°ch ki·ªÉm tra khi b·∫≠t/t·∫Øt l·ªõp b·∫£n ƒë·ªì
    map.on('overlayadd', e => {
        if (e.name === 'üó∫Ô∏è B·∫£n ƒë·ªì ph√¢n l√¥') { // Ki·ªÉm tra b·∫±ng t√™n layer
            opacityControl.classList.remove('hidden');
        }
    });

    map.on('overlayremove', e => {
        if (e.name === 'üó∫Ô∏è B·∫£n ƒë·ªì ph√¢n l√¥') { // Ki·ªÉm tra b·∫±ng t√™n layer
            opacityControl.classList.add('hidden');
        }
    });

    // Ki·ªÉm tra l√∫c t·∫£i trang
    if (map.hasLayer(parcelLayersGroup)) {
        opacityControl.classList.remove('hidden');
    } else {
        opacityControl.classList.add('hidden');
    }
    donateBtn.addEventListener('click', () => donateModal.classList.remove('hidden'));
    closeDonateModalBtn.addEventListener('click', () => donateModal.classList.add('hidden'));
    donateModal.addEventListener('click', (e) => { if (e.target === donateModal) donateModal.classList.add('hidden'); });
    copyBtn.addEventListener('click', () => { navigator.clipboard.writeText(accountNumber).then(() => { const originalIcon = copyBtn.innerHTML; copyBtn.innerHTML = '<svg ...></svg>'; setTimeout(() => { copyBtn.innerHTML = originalIcon; }, 1500); }).catch(err => console.error('L·ªói sao ch√©p: ', err)); });
    
    addLocationBtn.addEventListener('click', () => {
    if (!currentUser) {
        alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m ƒë·ªãa ƒëi·ªÉm!");
        return;
    }

    // G·ªçi h√†m ƒëi·ªÅn th√¥ng tin li√™n h·ªá t·ª´ h·ªì s∆°
    prefillUserContact();

    // B·∫≠t ch·∫ø ƒë·ªô th√™m ƒë·ªãa ƒëi·ªÉm
    isAddMode ? exitAllModes() : enterAddMode();
    });

    queryBtn.addEventListener('click', () => { isQueryMode ? exitAllModes() : enterQueryMode(); });
    listBtn.addEventListener('click', () => listModal.classList.remove('hidden'));
    document.getElementById('close-list-btn').addEventListener('click', () => listModal.classList.add('hidden'));
    document.getElementById('close-modal-btn').addEventListener('click', () => { modal.classList.add('hidden'); exitAllModes(); });

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const submitBtn = document.getElementById('submit-form-btn');
        if (!currentUser) return alert("Vui l√≤ng ƒëƒÉng nh·∫≠p.");
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        if (!selectedCoords || !data.name || !data.priceValue) { return alert('Vui l√≤ng ƒëi·ªÅn c√°c tr∆∞·ªùng b·∫Øt bu·ªôc.'); }
        submitBtn.textContent = 'ƒêang g·ª≠i...'; submitBtn.disabled = true;
        try {
            const docData = { userId: currentUser.uid, userName: currentUser.displayName, userAvatar: currentUser.photoURL, lat: selectedCoords.lat, lng: selectedCoords.lng, priceValue: parseFloat(data.priceValue), area: data.area ? parseFloat(data.area) : null, status: 'pending', createdAt: firebase.firestore.FieldValue.serverTimestamp(), name: data.name, priceUnit: data.priceUnit, notes: data.notes || '', contactName: data.contactName || '', contactEmail: data.contactEmail || '', contactPhone: data.contactPhone || '', contactFacebook: data.contactFacebook || '' };
            // L·∫•y t·ªïng s·ªë tin ƒë√£ ƒëƒÉng ƒë·ªÉ sinh m√£ BƒêS t·ª± ƒë·ªông
            const snapshot = await db.collection("listings")
                         .where("status", "==", "approved")
                         .get();

            const listingCount = snapshot.size + 1;
            const paddedNumber = String(listingCount).padStart(5, '0');
            const propertyCode = `BDS-${paddedNumber}`;

            // G√°n v√†o docData
            docData.propertyCode = propertyCode;
            docData.status = 'approved'; // m·∫∑c ƒë·ªãnh c√≤n b√°n
            docData.updatedAt = firebase.firestore.FieldValue.serverTimestamp();

            await db.collection("listings").add(docData);
            alert('G·ª≠i d·ªØ li·ªáu th√†nh c√¥ng, c·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥ng g√≥p!');
            modal.classList.add('hidden'); form.reset(); exitAllModes();
        } catch (error) { console.error("L·ªói khi th√™m d·ªØ li·ªáu: ", error); alert("ƒê√£ x·∫£y ra l·ªói khi g·ª≠i d·ªØ li·ªáu."); } finally { submitBtn.textContent = 'G·ª≠i D·ªØ Li·ªáu'; submitBtn.disabled = false; }
    });

    auth.onAuthStateChanged(async (user) => {
        if (user) {
            currentUser = user;

            // üîπ T·∫°o h·ªì s∆° Firestore n·∫øu ch∆∞a c√≥
            const userRef = db.collection("users").doc(user.uid);
            const doc = await userRef.get();

            if (!doc.exists) {
                await userRef.set({
                    displayName: user.displayName || "",
                    email: user.email || "",
                    phone: "",
                    contactFacebook: "",
                    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
                });
                console.log("‚úÖ H·ªì s∆° ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c t·∫°o.");
            } else {
                console.log("üìù H·ªì s∆° ƒë√£ c√≥:", doc.data());
            }

            firebaseuiContainer.classList.add('hidden');
            loginBtn.classList.add('hidden');
            userProfileDiv.classList.remove('hidden');
            userProfileDiv.classList.add('flex');
            document.getElementById('user-avatar').src = user.photoURL || 'https://placehold.co/40x40/e2e8f0/64748b?text=A';
            addLocationBtn.disabled = false;

        } else {
            currentUser = null;
            loginBtn.classList.remove('hidden');
            userProfileDiv.classList.add('hidden');
            userProfileDiv.classList.remove('flex');
            exitAllModes();
            addLocationBtn.disabled = true;
        }
    });

    loginBtn.addEventListener('click', () => { if (ui.isPendingRedirect()) return; firebaseuiContainer.classList.remove('hidden'); ui.start('#firebaseui-widget', { signInFlow: 'popup', signInOptions: [ firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.EmailAuthProvider.PROVIDER_ID, ], callbacks: { signInSuccessWithAuthResult: function(authResult, redirectUrl) { firebaseuiContainer.classList.add('hidden'); return false; } } }); });
    firebaseuiContainer.addEventListener('click', (e) => { if (e.target === firebaseuiContainer) firebaseuiContainer.classList.add('hidden'); });

    const listingsCol = db.collection("listings");
    const q = listingsCol.where("status", "==", "approved").orderBy("createdAt", "desc");
    q.onSnapshot((querySnapshot) => {
        localListings = [];
        priceMarkers.clearLayers();
        const priceList = document.getElementById('price-list');
        priceList.innerHTML = '';
        if (querySnapshot.empty) { priceList.innerHTML = '<p class="text-center text-gray-500 py-4">üì≠ Kh√¥ng c√≥ d·ªØ li·ªáu.</p>'; return; }
        // ƒêO·∫†N M√É M·ªöI
        querySnapshot.forEach((doc) => {
            const item = doc.data();
            item.id = doc.id;
            localListings.push(item);
            if (!item.lat || !item.lng) return;

            // T·∫°o marker nh∆∞ng KH√îNG bindPopup
            const marker = L.marker([item.lat, item.lng]);

            // B·∫Øt s·ª± ki·ªán click tr√™n marker ƒë·ªÉ g·ªçi h√†m m·ªõi
            marker.on('click', () => {
                showListingInfoPanel(item);
            });

            priceMarkers.addLayer(marker);

            // Ph·∫ßn code t·∫°o danh s√°ch b√™n d∆∞·ªõi kh√¥ng thay ƒë·ªïi
            const listItem = document.createElement('div');
            listItem.className = 'p-2 border-b cursor-pointer hover:bg-gray-100';
            const formattedPrice = `${item.priceValue} ${item.priceUnit}`;
            listItem.innerHTML = `<p class="font-semibold">${item.name}</p><p class="text-sm text-red-600">${formattedPrice}</p>`;
            listItem.onclick = () => {
                listModal.classList.add('hidden');
                map.setView([item.lat, item.lng], 18);
                // Khi click t·ª´ danh s√°ch, c≈©ng g·ªçi h√†m hi·ªÉn th·ªã panel
                showListingInfoPanel(item);
            };
            priceList.appendChild(listItem);
        });
    });
    
    // ƒê√≥ng submenu chia s·∫ª khi click ra ngo√†i
    document.addEventListener('click', function(e) {
        const submenu = document.getElementById('share-submenu');
        const isShareBtn = e.target.closest('#panel-actions button');
        if (submenu && submenu.classList.contains('is-visible') && !isShareBtn) {
            submenu.classList.remove('is-visible');
        }
    });

    handleUrlParameters();

    // 1. X·ª≠ l√Ω l∆∞u h·ªì s∆° khi submit form
    document.getElementById('profile-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  if (!currentUser) return;

  const updatedProfile = {
    displayName: document.getElementById('profile-name').value.trim(),
    email: document.getElementById('profile-email').value.trim(),
    phone: document.getElementById('profile-phone').value.trim(),
    zalo: document.getElementById('profile-zalo').value.trim(),
    whatsapp: document.getElementById('profile-whatsapp').value.trim(),
    contactFacebook: document.getElementById('profile-facebook').value.trim(),
    updatedAt: firebase.firestore.FieldValue.serverTimestamp()
  };

  try {
    // TH√äM D√íNG N√ÄY ƒê·ªÇ KI·ªÇM TRA
    console.log("B·∫ÆT ƒê·∫¶U C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU:", updatedProfile);
    await db.collection("users").doc(currentUser.uid).update(updatedProfile);
      // TH√äM D√íNG N√ÄY ƒê·ªÇ X√ÅC NH·∫¨N
    console.log("‚úÖ‚úÖ‚úÖ C·∫¨P NH·∫¨T H·ªí S∆† TH√ÄNH C√îNG TR√äN FIRESTORE!");
    alert("‚úÖ H·ªì s∆° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.");
    document.getElementById('profile-modal').classList.add('hidden');
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t h·ªì s∆°:", error);
    alert("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t h·ªì s∆°.");
  }
});

    // 2. X·ª≠ l√Ω n√∫t H·ªßy trong modal
    document.getElementById('close-profile-btn').addEventListener('click', () => {
    document.getElementById('profile-modal').classList.add('hidden');
    });
    
    });

}); // --- END OF DOMContentLoaded ---